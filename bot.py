import telebot
import config 
import datetime as dt
import threading
import schedule

from telebot import types

bot = telebot.TeleBot(config.TOKEN)
count = 0 # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥
counter = 0 # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ä—Ç–æ–≤
dict = {
    'start_data': 'count'
    } # –±–¥ 

@bot.message_handler(commands=['start'])
def welcome(message):

    global counter

    #sticker
    sticker = open('/Users/supreme/Desktop/test_bot/sticker.webp', 'rb')
    bot.send_sticker(message.chat.id, sticker)

    #keyboard 
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('+1 —Å–∏–∂–∫–∞')
    item2 = types.KeyboardButton('–∏–Ω—Ñ–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π')
    markup.add(item1, item2)

    if counter == 0:
        #welcome message

        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø ‚Äî <b>{1.first_name}</b>, –∏ —è –ø–æ–º–æ–≥—É –±—Ä–æ—Å–∏—Ç—å —Ç–µ–±–µ –∫—É—Ä–∏—Ç—å —Å–∏–∂–∫–∏ ;) –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞–π –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫—É—Ä–∞ ‚Äî –∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É–∂–µ –∑–∞ –º–Ω–æ–π üòè'.format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)
        msg = bot.send_message(message.chat.id, f'–ù–∞—á–Ω–µ–º —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥ –≤ –¥–µ–Ω—å: –Ω–∞–ø–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–ª—è —Ç–µ–±—è —á–∏—Å–ª–æ —Å–∏–≥–∞—Ä–µ—Ç –≤ –¥–µ–Ω—å')
        bot.register_next_step_handler(msg, max_number)
        counter += 1
    else:
        bot.send_message(message.chat.id, f'–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {message.from_user.first_name}!\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–∞—Ä–µ—Ç –∑–∞ –¥–µ–Ω—å, —Ç–æ —Å–æ–≤–µ—Ç—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n/reset ‚Äî —Å–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n/change ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–∞—Ä–µ—Ç –≤ –¥–µ–Ω—å\n–£—Å–ø–µ—Ö–æ–≤‚ú®', parse_mode='html', reply_markup=markup)
        

def max_number(message):
    global count
    try:
        test = int(message.text)
        if test > 0:
            count = test
            msg = bot.send_message(message.chat.id, f'–û–∫–µ–π, –∑–∞–ø–æ–º–Ω–∏–ª–∏ ({count}) üòè')
            #bot.register_next_step_handler(msg, mirror_answer)
            msg
        else:
            msg = bot.send_message(message.chat.id, f'–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üòâ')
            bot.register_next_step_handler(msg, max_number)
    except:
        msg = bot.reply_to(message, f'–ì–¥–µ-—Ç–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ ü§î')
        bot.register_next_step_handler(msg, max_number)


@bot.message_handler(commands=['data'])
def send_info(message):
    
    msg = ''
    for key in dict:
       msg += f'\n{key}, {dict[key]}'
    bot.send_message(message.chat.id, msg)

@bot.message_handler(commands=['change'])
def changer(message):
    global count
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥ –≤ –¥–µ–Ω—å:')
    try:
        test = int(message.text)
        if test > 0:
            count = test
            msg = bot.send_message(message.chat.id, f'–û–∫–µ–π, –∑–∞–ø–æ–º–Ω–∏–ª–∏ ({count}) üòè')
            #bot.register_next_step_handler(msg, mirror_answer)
            msg
        else:
            msg = bot.send_message(message.chat.id, f'–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üòâ')
            bot.register_next_step_handler(msg, changer)
    except:
        msg = bot.reply_to(message, f'–ì–¥–µ-—Ç–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ ü§î')
        bot.register_next_step_handler(msg, changer)    

@bot.message_handler(commands=['info'])

def info(message):
    bot.send_message(message.chat.id, f'–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö –µ—Å—Ç—å –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ ;)')

@bot.message_handler(commands=['about'])

def about(message):
    bot.send_message(message.chat.id, f'–ü—Ä–æ—Å—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –ø–æ–º–æ—á—å –±—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å —Å–∏–∂–∫–∏ üí´')

@bot.message_handler(commands=['reset'])
def reset(message):
    global count, counter, dict
    count = 0
    counter = 0
    dict = {'': None}
    bot.send_message(message.chat.id, f'–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω üòé')


@bot.message_handler(content_types=['text'])

def mirror_answer(message):
    
    global dict
    global count
    if message.text == '+1 —Å–∏–∂–∫–∞':

        now = dt.datetime.utcnow()
        period = dt.timedelta(hours=3)
        moscow_time = now + period
        f_time = moscow_time.strftime('%d.%m.%Y')

        if f_time == list(dict.keys())[-1]:
            dict[f_time] += 1
        else:
            dict.setdefault(f_time, 1)
        
        if dict[f_time] == 1:
            text = f'–ó–∞—Å—á–∏—Ç–∞–Ω–æ!\n–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({f_time}) –±—ã–ª–∞ –≤—ã–∫—É—Ä–µ–Ω–∞ {dict[f_time]} —Å–∏–∂–∫–∞ üôÄ'
        elif 2 <= dict[f_time] <= 4:
            text = f'–ó–∞—Å—á–∏—Ç–∞–Ω–æ!\n–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({f_time}) –±—ã–ª–æ –≤—ã–∫—É—Ä–µ–Ω–æ {dict[f_time]} —Å–∏–∂–∫–∏ üôÄ'
        else:
            text = f'–ó–∞—Å—á–∏—Ç–∞–Ω–æ!\n–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({f_time}) –±—ã–ª–æ –≤—ã–∫—É—Ä–µ–Ω–æ {dict[f_time]} —Å–∏–∂–µ–∫ üôÄ'
        
        
        if dict[f_time] == count:
            text += f'\nP.S. –ù–∞ —ç—Ç–æ–º –ø–æ—Ä–∞ –∑–∞–∫—Ä—É–≥–ª—è—Ç—å—Å—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ;)'
        elif dict[f_time] > count:
            text += f'\nP.S. –£–∂–µ –±–æ—Ä—â–∏—à—å, –ø–∏—Ä–æ–∂–æ—á–µ–∫ üò†'
        msg = bot.send_message(message.chat.id, text)

    elif message.text == '–∏–Ω—Ñ–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π':

        dictlength = len(list(dict.keys()))
        output = f''

        if dictlength >= 5:
            for i in reversed(range(1,6)):
                output += f'{list(dict.keys())[-i]} ‚Äî {list(dict.values())[-i]}\n'
        else:
            for i in reversed(range(1, (dictlength+1))):
                output += f'{list(dict.keys())[-i]} ‚Äî {list(dict.values())[-i]}\n'

        msg = bot.send_message(message.chat.id, output)
    else:
        msg = bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å :)')
    #bot.register_next_step_handler(msg, mirror_answer)
    msg
    


# RUN

bot.polling(none_stop=True)


